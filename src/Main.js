const fs = require('fs');
const readline = require('readline');
const bcrypt = require('bcrypt');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const saltRounds = 10;
let accounts = [];
let failedAttempts = {};

function loadAccounts() {
    if (fs.existsSync('accounts.json')) {
        const data = fs.readFileSync('accounts.json', 'utf8');
        accounts = JSON.parse(data);
    }
}

function saveAccounts() {
    fs.writeFileSync('accounts.json', JSON.stringify(accounts, null, 4));
}

function logAction(user, action) {
    const logEntry = `${new Date().toISOString()} | ${user.username} | ${action}\n`;
    fs.appendFileSync('logs.txt', logEntry);
}

function registerAccount() {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ', (username) => {
        if (accounts.some(acc => acc.username === username)) {
            console.log('‚ùå –û—à–∏–±–∫–∞: —ç—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç!');
            mainMenu();
            return;
        }

        rl.question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ', async (password) => {
            if (password.length < 6) {
                console.log('‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤!');
                mainMenu();
                return;
            }

            const hashedPassword = await bcrypt.hash(password, saltRounds);
            accounts.push({ username, password: hashedPassword, role: 'user', banned: false });
            saveAccounts();
            console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
            mainMenu();
        });
    });
}

function login() {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ', (username) => {
        if (failedAttempts[username] >= 3) {
            console.log('üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            mainMenu();
            return;
        }

        rl.question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ', async (password) => {
            const user = accounts.find(acc => acc.username === username);
            if (!user) {
                console.log('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                mainMenu();
                return;
            }
            if (user.banned) {
                console.log('üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
                mainMenu();
                return;
            }

            if (await bcrypt.compare(password, user.password)) {
                console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
                failedAttempts[username] = 0;
                logAction(user, '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
                commandLoop(user);
            } else {
                failedAttempts[username] = (failedAttempts[username] || 0) + 1;
                console.log(`‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! (${failedAttempts[username]}/3)`);
                mainMenu();
            }
        });
    });
}

function banUser() {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ', (username) => {
        const user = accounts.find(acc => acc.username === username);
        if (user) {
            user.banned = true;
            saveAccounts();
            console.log(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`);
            logAction(user, '–ë–∞–Ω –∞–∫–∫–∞—É–Ω—Ç–∞');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
        commandLoop();
    });
}

function setPermission() {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', (username) => {
        rl.question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å (user/vip/admin): ', (newRole) => {
            const user = accounts.find(acc => acc.username === username);
            if (user && (newRole === 'user' || newRole === 'admin' || newRole === 'vip')) {
                user.role = newRole;
                saveAccounts();
                console.log('‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ —Ä–æ–ª—å.');
            }
            commandLoop();
        });
    });
}

async function changePassword(user) {
    const oldPassword = await askQuestion("üîê –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å: ");
    if (!await bcrypt.compare(oldPassword, user.password)) {
        console.log("‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π!");
        return;
    }

    const newPassword = await askQuestion("üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ");
    if (newPassword.length < 6) {
        console.log("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤!");
        return;
    }

    if (await bcrypt.compare(newPassword, user.password)) {
        console.log("‚ö†Ô∏è –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º!");
        return;
    }

    const confirmPassword = await askQuestion("üîë –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ");
    if (newPassword !== confirmPassword) {
        console.log("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!");
        return;
    }

    user.password = await bcrypt.hash(newPassword, saltRounds);
    saveAccounts();
    console.log("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!");
    logAction(user, '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è');
    mainMenu();
}

function showAccounts() {
    console.log('üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    accounts.forEach(acc => console.log(`üë§ –õ–æ–≥–∏–Ω: ${acc.username} | –†–æ–ª—å: ${acc.role}`));
}

function askQuestion(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

//vip users

async function setNickname(user) {

    const newNickname = await askQuestion('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º: ');

    if (accounts.some(acc => acc.username === newNickname)) {
        console.log('‚ùå –û—à–∏–±–∫–∞: —ç—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç!');
        return;
    }

    if (newNickname.length < 3 || newNickname.length > 20) {
        console.log('‚ö†Ô∏è –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!');
        return;
    }

    if (/[^a-zA-Z0-9_]/.test(newNickname)) {
        console.log('‚ö†Ô∏è –ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è!');
        return;
    }

    user.username = newNickname;
    saveAccounts();

    console.log(`‚úÖ –ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${newNickname}!`);
    logAction(user, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞');
    commandLoop();
}

function commandLoop(user) {
    rl.question('\nüíª –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (help –¥–ª—è —Å–ø–∏—Å–∫–∞): ', (command) => {
        switch (command) {
            case 'help':
                console.log('üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
                console.log('üîπ whoami ‚Äî –≤–∞—à –ª–æ–≥–∏–Ω –∏ —Ä–æ–ª—å');
                console.log('üîπ changepass ‚Äî —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å');
                console.log('üîπ exit ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');
                if (user.role === 'admin') {
                    console.log('üîπ banuser ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                    console.log('üîπ showusers ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
                    console.log('üîπ setperm ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                    console.log('üîπ betaver ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–µ—Ç–∞ –≤–µ—Ä–∏—Å—é')
                    console.log('üîπ setlogin ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω');
                }
                if (user.role === 'vip') {
                    console.log('‚≠ê [VIP] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
                    console.log('üîπ setlogin ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω');
                    console.log('üîπ betaver ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–µ—Ç–∞ –≤–µ—Ä–∏—Å—é');

                }
                break;
            case 'whoami':
                console.log(`üë§ –õ–æ–≥–∏–Ω: ${user.username} | –†–æ–ª—å: ${user.role} ${user.banned ? 'üö´ (–ó–ê–ë–ê–ù–ï–ù)' : ''}`);
                break;
            case 'banuser':
                if (user.role === 'admin') banUser();
                else console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                break;
            case 'changepass':
                changePassword(user);
                break;
            case 'exit':
                mainMenu();
                break;
            case 'showusers':
                if (user.role === 'admin') showAccounts();
                else console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                break;
            case 'setperm':
                if (user.role === 'admin') setPermission();
                else console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                break;
            case 'setlogin':
                if (user.role === 'vip' || user.role === 'admin') setNickname(user);
                else console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                break;
            case 'betaver':
                if (user.role === 'vip' || user.role === 'admin') betaLoop(user);
                else console.log('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞–≤—Ç—Å–≤–æ–≤–∞—Ç—å –≤ –±–µ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
                break;
            default:
                console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!');
        }
        commandLoop(user);
    });
}


//–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ—Ç–∞ –≤–µ—Ä—Å–∏–∏, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–µ—Ä–µ–Ω–æ—Å –≤ commandloop

const helpData = [
    {
        question: /—Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å|–ø–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å|–∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å|–∫–∞–∫ –ø–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å|–ø–∞—Ä–æ–ª—å/i,
        answer: "–î–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'changepass'. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å."
    },
    {
        question: /–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è|–∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å|–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è|–∫–∞–∫ –±–ª–æ–∫–Ω—É—Ç—å —é–∑–µ—Ä–∞/i,
        answer: "–î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'banuser'. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å."
    },
    {
        question: /—Ä–æ–ª—å admin|—á—Ç–æ —Ç–∞–∫–æ–µ —Ä–æ–ª—å admin|—Ä–æ–ª—å –∞–¥–º–∏–Ω|/i,
        answer: "–†–æ–ª—å 'admin' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –≤–∫–ª—é—á–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π."
    },
    {
        question: /–≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã|–≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã|–∫–∞–∫ –≤—ã–π—Ç–∏|–∫–∞–∫ –ª–∏–≤–Ω—É—Ç—å/i,
        answer: "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'exit'."
    },
    {
        question: /–∫—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å|–∫—Ç–æ —Å–æ–∑–¥–∞–ª —ç—Ç–æ|–∫—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏|/i,
        answer: "–°–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ NeuroTee"
    }
];

function callAssistant(user) {
    rl.question('\nü§ñ –õ–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ "exit" –¥–ª—è –≤—ã—Ö–æ–¥–∞): ', (question) => {
        question = question.toLowerCase();  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–æ–ø—Ä–æ—Å –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        if (question === 'exit') {
            betaLoop(user);  // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        } else {
            const response = helpData.find(entry => entry.question.test(question));  // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç
            if (response) {
                console.log(response.answer);
            } else {
                console.log('‚ùì –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.');
            }
            callAssistant(user);  // –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        }
    });
}



function betaLoop(user) {
    console.log('–í–∫–ª—é—á–µ–Ω –±–µ—Ç–∞ —Ä–µ–∂–∏–º');

    rl.question('\nüíª –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (betaver) (help –¥–ª—è —Å–ø–∏—Å–∫–∞): ', (command) => {
        switch (command) {
            case 'help':
                console.log('üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
                console.log('ü§ñ ai - –ø–æ–æ–±—â–∞—Ç—Å—è —Å –ª–∏—á–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º')
                console.log('üîπ deflaut - –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –æ–±—ã–Ω—ã–π —Ä–µ–∂–∏–º')
                break;
            case 'ai':
                console.log('–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ø–æ–º–æ—â–Ω–∏–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å —Å–ª–∞–±—ã–º)');
                callAssistant(user);
                break;
            case 'deflaut':
                console.log('–í–∫–ª—é—á–µ–Ω –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º');
                commandLoop(user);
                break;
            default:
                console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!');
        }
        betaLoop(user);
    });
}

function mainMenu() {
    console.log('\nüîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤!');
    console.log('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: login / register / exit');
    rl.question('> ', (choice) => {
        if (choice === 'login') login();
        else if (choice === 'register') registerAccount();
        else if (choice === 'exit') {
            console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...');
            process.exit(0);
        } else {
            console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!');
            mainMenu();
        }
    });
}

loadAccounts();
mainMenu();
