const fs = require('fs');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
            output: process.stdout
});

let accounts = [];

function loadAccounts() {
    if (fs.existsSync('accounts.json')) {
        const data = fs.readFileSync('accounts.json', 'utf8');
        accounts = JSON.parse(data);
    }
}

function saveAccounts() {
    fs.writeFileSync('accounts.json', JSON.stringify(accounts, null, 4));
}

function registerAccount() {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ', (username) => {
    if (accounts.some(acc => acc.username === username)) {
        console.log('‚ùå –û—à–∏–±–∫–∞: —ç—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç!');
        mainMenu();
        return;
    }

    rl.question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ', (password) => {
            accounts.push({ username, password, role: 'user' });
    saveAccounts();
    console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    mainMenu();
        });
    });
}

function login() {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ', (username) => {
            rl.question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ', (password) => {
            const user = accounts.find(acc => acc.username === username && acc.password === password);
    if (user) {
        console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
        commandLoop(user);
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!');
        mainMenu();
    }
        });
    });
}

function showAccounts() {
    console.log('üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    accounts.forEach(acc => console.log(`üë§ –õ–æ–≥–∏–Ω: ${acc.username} | –†–æ–ª—å: ${acc.role}`));
}

function deleteUser() {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ', (username) => {
            accounts = accounts.filter(acc => acc.username !== username);
    saveAccounts();
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.');
    mainMenu();
    });
}

function setPermission() {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', (username) => {
            rl.question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å (user/admin): ', (newRole) => {
            const user = accounts.find(acc => acc.username === username);
    if (user && (newRole === 'user' || newRole === 'admin')) {
        user.role = newRole;
        saveAccounts();
        console.log('‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ —Ä–æ–ª—å.');
    }
    mainMenu();
        });
    });
}

function askQuestion(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

async function changePassword(user) {
    const oldPassword = await askQuestion("üîê –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å: ");

    if (oldPassword !== user.password) {
        console.log("‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π!");
        return;
    }

    const newPassword = await askQuestion("üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ");
    const confirmPassword = await askQuestion("üîë –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ");

    if (newPassword !== confirmPassword) {
        console.log("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!");
        return;
    }

    user.password = newPassword;
    saveAccounts();
    console.log("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!");

    mainMenu();
}

function commandLoop(user) {
    rl.question('\nüíª –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (help –¥–ª—è —Å–ø–∏—Å–∫–∞): ', (command) => {
            switch (command) {
                case 'help':
                    console.log('üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
                    console.log('üîπ whoami ‚Äî –≤–∞—à –ª–æ–≥–∏–Ω –∏ —Ä–æ–ª—å');
                    console.log('üîπ showusers ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (admin)');
                    console.log('üîπ deluser ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (admin)');
                    console.log('üîπ setperm ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (admin)');
                    console.log('üîπ exit ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');
                    break;
                case 'whoami':
                    console.log(`üë§ –õ–æ–≥–∏–Ω: ${user.username} | –†–æ–ª—å: ${user.role}`);
                break;
                case 'showusers':
                    if (user.role === 'admin') showAccounts();
                    else console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                    break;
                case 'deluser':
                    if (user.role === 'admin') deleteUser();
                    else console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                    break;
                case 'setperm':
                    if (user.role === 'admin') setPermission();
                    else console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                    break;
                case 'exit':
                    mainMenu();
                    return;
                case "changepass":
                    if (!user) {
                        console.log("‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç!");
                    } else {
                        changePassword(user);
                    }
                    return;
                default:
                    console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!');
            }
            commandLoop(user);
    });
}

function mainMenu() {
    console.log('\nüîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤!');
    console.log('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: login / register / exit');
    rl.question('> ', (choice) => {
        if (choice === 'login') login();
        else if (choice === 'register') registerAccount();
        else if (choice === 'exit') {
            console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...');
            process.exit(0); // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        }
        else {
            console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!');
            mainMenu();
        }
    });
}

loadAccounts();
mainMenu();
