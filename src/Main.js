const fs = require('fs');
const readline = require('readline');
const bcrypt = require('bcrypt');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const saltRounds = 10;
let accounts = [];
let failedAttempts = {};

function loadAccounts() {
    if (fs.existsSync('accounts.json')) {
        const data = fs.readFileSync('accounts.json', 'utf8');
        accounts = JSON.parse(data);
    }
}

function saveAccounts() {
    fs.writeFileSync('accounts.json', JSON.stringify(accounts, null, 4));
}

function logAction(user, action) {
    const logEntry = `${new Date().toISOString()} | ${user.username} | ${action}\n`;
    fs.appendFileSync('logs.txt', logEntry);
}

function registerAccount() {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ', (username) => {
        if (accounts.some(acc => acc.username === username)) {
            console.log('‚ùå –û—à–∏–±–∫–∞: —ç—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç!');
            mainMenu();
            return;
        }

        rl.question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ', async (password) => {
            if (password.length < 6) {
                console.log('‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤!');
                mainMenu();
                return;
            }

            const hashedPassword = await bcrypt.hash(password, saltRounds);
            accounts.push({ username, password: hashedPassword, role: 'user', banned: false });
            saveAccounts();
            console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
            mainMenu();
        });
    });
}

function login() {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ', (username) => {
        if (failedAttempts[username] >= 3) {
            console.log('üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            mainMenu();
            return;
        }

        rl.question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ', async (password) => {
            const user = accounts.find(acc => acc.username === username);
            if (!user) {
                console.log('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                mainMenu();
                return;
            }
            if (user.banned) {
                console.log('üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
                mainMenu();
                return;
            }

            if (await bcrypt.compare(password, user.password)) {
                console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
                failedAttempts[username] = 0;
                logAction(user, '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
                commandLoop(user);
            } else {
                failedAttempts[username] = (failedAttempts[username] || 0) + 1;
                console.log(`‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! (${failedAttempts[username]}/3)`);
                mainMenu();
            }
        });
    });
}

function banUser(user) {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ', (username) => {
        if (!accounts || !Array.isArray(accounts)) {
            console.log('‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.');
            return commandLoop(user);
        }

        const bannedUser = accounts.find(acc => acc.username === username);
        if (bannedUser) {
            bannedUser.banned = !bannedUser.banned;
            saveAccounts();

            const status = bannedUser.banned ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
            console.log(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} ${status}!`);

            logAction(user, `${status === '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª' : '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}`);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
        commandLoop(user);
    });
}

function checkBanStatus(user) {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ', (username) => {
        const checkedUser = accounts.find(acc => acc.username === username);
        if (checkedUser) {
            if (checkedUser.banned) {  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                console.log(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
            } else {
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
        commandLoop(user);
    });
}

function giftVIPStatus(user) {
    if (user.role === 'vip') {
        rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å VIP-—Å—Ç–∞—Ç—É—Å: ', (username) => {
            const recipient = accounts.find(acc => acc.username === username);
            if (recipient) {
                // –°–Ω–∏–º–∞–µ–º VIP —Ä–æ–ª—å —Å –¥–∞—Ä–∏—Ç–µ–ª—è –∏ –¥–∞—ë–º –µ—ë –ø–æ–ª—É—á–∞—Ç–µ–ª—é
                user.role = 'user';  // –î–∞—Ä–∏—Ç–µ–ª—å —Ç–µ—Ä—è–µ—Ç VIP —Å—Ç–∞—Ç—É—Å
                recipient.role = 'vip';  // –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è VIP

                saveAccounts();

                logAction(user, '–ü–æ–¥–∞—Ä–∏–ª —Å–≤–æ–π –≤–∏–ø —Å—Ç–∞—Ç—É—Å');
                console.log('üéÅ –ü–æ–¥–∞—Ä–∏–ª–∏ VIP-—Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username} –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–≤–æ–π VIP-—Å—Ç–∞—Ç—É—Å.');
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
            commandLoop(user);
        });
    } else {
        console.log('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
    }
}



function setPermission(user) {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', (username) => {
        rl.question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å (user/vip/admin): ', (newRole) => {
            const tuser = accounts.find(acc => acc.username === username);
            if (tuser && (newRole === 'user' || newRole === 'admin' || newRole === 'vip')) {
                tuser.role = newRole;
                saveAccounts();
                console.log('‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ —Ä–æ–ª—å.');
            }
            commandLoop(user);
        });
    });
}

function deleteUser(user) {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ', (username) => {
        const index = accounts.findIndex(acc => acc.username === username);
        if (index === -1) {
            console.log('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return commandLoop(user);
        }

        if (accounts[index].role === 'admin') {
            console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
            return commandLoop(user);
        }

        accounts.splice(index, 1);
        saveAccounts();
        console.log(`üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É–¥–∞–ª–µ–Ω.`);
        logAction(user, `–£–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}`);
        commandLoop(user);
    });
}

async function changePassword(user) {
    const oldPassword = await askQuestion("üîê –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å: ");
    if (!await bcrypt.compare(oldPassword, user.password)) {
        console.log("‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π!");
        return;
    }

    const newPassword = await askQuestion("üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ");
    if (newPassword.length < 6) {
        console.log("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤!");
        return;
    }

    if (await bcrypt.compare(newPassword, user.password)) {
        console.log("‚ö†Ô∏è –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º!");
        return;
    }

    const confirmPassword = await askQuestion("üîë –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ");
    if (newPassword !== confirmPassword) {
        console.log("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!");
        return;
    }

    user.password = await bcrypt.hash(newPassword, saltRounds);
    saveAccounts();
    console.log("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!");
    logAction(user, '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è');
    commandLoop(user);
}

function showAccounts() {
    console.log('üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    accounts.forEach(acc => console.log(`üë§ –õ–æ–≥–∏–Ω: ${acc.username} | –†–æ–ª—å: ${acc.role}`));
}

function askQuestion(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

//vip users

async function setNickname(user) {

    const newNickname = await askQuestion('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º: ');

    if (accounts.some(acc => acc.username === newNickname)) {
        console.log('‚ùå –û—à–∏–±–∫–∞: —ç—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç!');
        return;
    }

    if (newNickname.length < 3 || newNickname.length > 20) {
        console.log('‚ö†Ô∏è –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!');
        return;
    }

    if (/[^a-zA-Z0-9_]/.test(newNickname)) {
        console.log('‚ö†Ô∏è –ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è!');
        return;
    }

    user.username = newNickname;
    saveAccounts();

    console.log(`‚úÖ –ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${newNickname}!`);
    logAction(user, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞');
    commandLoop(user);
}

function commandLoop(user) {
    rl.question('\nüíª –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (help –¥–ª—è —Å–ø–∏—Å–∫–∞): ', (command) => {
        switch (command) {
            case 'help':
                console.log('üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
                console.log('üîπ whoami ‚Äî –≤–∞—à –ª–æ–≥–∏–Ω –∏ —Ä–æ–ª—å');
                console.log('üîπ changepass ‚Äî —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å');
                console.log('üîπ exit ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');
                if (user.role === 'admin') {
                    console.log('üîπ banuser ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                    console.log('üîπ showusers ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
                    console.log('üîπ setperm ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                    console.log('üîπ betaver ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–µ—Ç–∞ –≤–µ—Ä–∏—Å—é')
                    console.log('üîπ setlogin ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω');
                    console.log('üîπ deluser ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                    console.log('üîπ checkban ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                }
                if (user.role === 'vip') {
                    console.log('‚≠ê [VIP] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
                    console.log('üîπ setlogin ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω');
                    console.log('üîπ betaver ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–µ—Ç–∞ –≤–µ—Ä–∏—Å—é');
                    console.log('üîπ giftvip ‚Äî –ø–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å vip –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');

                }
                break;
            case 'whoami':
                console.log(`üë§ –õ–æ–≥–∏–Ω: ${user.username} | –†–æ–ª—å: ${user.role} ${user.banned ? 'üö´ (–ó–ê–ë–ê–ù–ï–ù)' : ''}`);
                logAction(user, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª whoami')
                break;
            case 'banuser':
                if (user.role === 'admin') banUser(user);
                else console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                break;
            case 'changepass':
                changePassword(user);
                break;
            case 'exit':
                mainMenu();
                break;
            case 'checkban':
                checkBanStatus(user);
                break;
            case 'showusers':
                if (user.role === 'admin') showAccounts();
                else console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                break;
            case 'setperm':
                if (user.role === 'admin') setPermission(user);
                else console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                break;
            case 'deluser':
                deleteUser(user);
                break;
            case 'setlogin':
                if (user.role === 'vip' || user.role === 'admin') setNickname(user);
                else console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
                break;
            case 'betaver':
                if (user.role === 'vip' || user.role === 'admin') {
                    console.log('–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –±–µ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
                    betaLoop(user);
                }
                else console.log('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞–≤—Ç—Å–≤–æ–≤–∞—Ç—å –≤ –±–µ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
                break;
            case 'giftvip':
                giftVIPStatus(user);
                break;
            default:
                console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!');
        }
        commandLoop(user);
    });
}


//–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ—Ç–∞ –≤–µ—Ä—Å–∏–∏, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–µ—Ä–µ–Ω–æ—Å –≤ commandloop

const helpData = [
    {
        keywords: ["–ø–∞—Ä–æ–ª—å", "—Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "–∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "–∫–∞–∫ –ø–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å"],
        answer: "–î–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'changepass'. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å."
    },
    {
        keywords: ["–±–∞–Ω", "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–∫–∞–∫ –∑–∞–±–∞–Ω–∏—Ç—å"],
        answer: "–î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'banuser'. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å."
    },
    {
        keywords: ["–∞–¥–º–∏–Ω", "—Ä–æ–ª—å admin", "—á—Ç–æ —Ç–∞–∫–æ–µ –∞–¥–º–∏–Ω", "admin –ø—Ä–∞–≤–∞"],
        answer: "–†–æ–ª—å 'admin' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –≤–∫–ª—é—á–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π."
    },
    {
        keywords: ["–≤—ã–π—Ç–∏", "–∫–∞–∫ –≤—ã–π—Ç–∏", "–≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "–∫–∞–∫ –ª–∏–≤–Ω—É—Ç—å"],
        answer: "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'exit'."
    },
    {
        keywords: ["—Å–æ–∑–¥–∞—Ç–µ–ª—å", "–∫—Ç–æ —Å–æ–∑–¥–∞–ª", "–∞–≤—Ç–æ—Ä", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"],
        answer: "–°–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî NeuroTee"
    }
];

function callAssistant(user) {
    rl.question('\nü§ñ –õ–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ "exit" –¥–ª—è –≤—ã—Ö–æ–¥–∞): ', (question) => {
        question = question.toLowerCase();  // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

        if (question === 'exit') {
            betaLoop(user);
            return;
        }

        const response = helpData.find(entry =>
            entry.keywords.some(keyword => question.includes(keyword))
        );

        if (response) {
            console.log(response.answer);
        } else {
            console.log('‚ùì –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –µ–≥–æ –∏–Ω–∞—á–µ.');
        }

        callAssistant(user);
    });
}

//–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è

function loadMessages() {
    if (fs.existsSync('messages.json')) {
        const data = fs.readFileSync('messages.json', 'utf8');
        return JSON.parse(data);
    }
    return []; // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
}

function saveMessages(messages) {
    fs.writeFileSync('messages.json', JSON.stringify(messages, null, 4));
}

function sendMessage(user) {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ', (toUser) => {
        const recipient = accounts.find(acc => acc.username === toUser);
        if (!recipient) {
            console.log('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return betaLoop(user); // –ò–∑–±–µ–≥–∞–µ–º –¥–≤–æ–π–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ betaLoop()
        }

        rl.question('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ', (messageText) => {
            if (!messageText.trim()) {
                console.log('‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!');
                return betaLoop(user); // –¢—É—Ç —Ç–æ–∂–µ –ª—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            }

            const messages = loadMessages();
            messages.push({
                from: user.username,
                to: toUser,
                message: messageText,
                timestamp: new Date().toISOString()
            });
            saveMessages(messages);

            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
            betaLoop(user);
        });
    });
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function viewMessages(user) {
    const messages = loadMessages().filter(msg => msg.to === user.username);

    if (messages.length === 0) {
        console.log('üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.');
    } else {
        console.log('üì© –£ –≤–∞—Å ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π:');
        messages.forEach(msg => {
            console.log('üì® –û—Ç ${msg.from} (${msg.timestamp}): ${msg.message}');
        });
    }
    betaLoop(user);
}



function betaLoop(user) {

    rl.question('\nüíª –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (betaver) (help –¥–ª—è —Å–ø–∏—Å–∫–∞): ', (command) => {
        switch (command) {
            case 'help':
                console.log('üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
                console.log('ü§ñ ai - –ø–æ–æ–±—â–∞—Ç—Å—è —Å –ª–∏—á–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º')
                console.log('üîπ exit - –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –æ–±—ã–Ω—ã–π —Ä–µ–∂–∏–º')
                console.log('üîπ sendmsg - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
                console.log('üîπ inbox - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è')
                break;
            case 'ai':
                console.log('–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ø–æ–º–æ—â–Ω–∏–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å —Å–ª–∞–±—ã–º)');
                callAssistant(user);
                break;
            case 'exit':
                console.log('–í–∫–ª—é—á–µ–Ω –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º');
                commandLoop(user);
                break;
            case 'sendmsg':
                sendMessage(user);
                break;
            case 'inbox':
                viewMessages(user);
                break;
            default:
                console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!');
        }
        betaLoop(user);
    });
}

function mainMenu() {
    console.log('\nüîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤!');
    console.log('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: login / register / exit');
    rl.question('> ', (choice) => {
        if (choice === 'login') login();
        else if (choice === 'register') registerAccount();
        else if (choice === 'exit') {
            console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...');
            process.exit(0);
        } else {
            console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!');
            mainMenu();
        }
    });
}

loadAccounts();
mainMenu();
